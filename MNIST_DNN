#!/usr/local/bin/python3

import numpy as np
import warnings
warnings.filterwarnings('ignore',category=FutureWarning)
import tensorflow as tf
import matplotlib.pyplot as plt
import os
import cv2
from keras.utils import to_categorical
from keras.models import Sequential
from keras.models import load_model
from keras.layers import Dense, Activation
from keras.datasets import mnist

tf.logging.set_verbosity(tf.logging.ERROR)

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

x_train /= 255.0
x_test /= 255.0

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)


def generateModel():
	model = Sequential()
	model.add(Dense(512, input_shape=(784,)))
	model.add(Activation('relu'))
	model.add(Dense(256))
	model.add(Activation('relu'))
	model.add(Dense(10))
	model.add(Activation('softmax'))
	model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])
	return model

def displayImage(img, guess):
	pixels = img*255.0
	pixels = pixels.reshape(28, 28)

	plt.title('Computer\'s guess is {label}'.format(label=guess))
	plt.imshow(pixels, cmap='gray')
	plt.show()

def train(model):
	model.fit(x_train, y_train, epochs=10, batch_size=1000, verbose=0)

def loadCustomImage(path):
	image = cv2.imread(path)
	gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	gray = gray.reshape(784)
	gray = gray.astype('float32')
	gray /= 255.0
	return gray

def main():
	if not os.path.exists('model.h5'):
		model = generateModel()
		print("Training model...")
		train(model)
		model.save('model.h5')
	else:
		model = load_model('model.h5')
	print("Accuracy:", (model.evaluate(x_test, y_test, verbose=0)[1]*100))

	if not os.path.exists('custom.png'):
		for i in range(10):
			displayImage(x_test[i], model.predict(np.array([x_test[i]])).argmax())
	else:
		x = loadCustomImage('custom.png')
		displayImage(x, model.predict(np.array([x])).argmax())


if __name__ == '__main__':
	main()
